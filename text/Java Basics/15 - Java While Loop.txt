Java While Loop

Loops
- Loops can execute a block of code as long as a specified condition is true.
- Loops are handy because they save time, reduce errors, and they make code more readable.

Java While Loop
- The while loop repeats a block of code as long as the specified condition is true:
- Syntax

while (condition) {
    // code block to be executed
}

- In the example below, the code in the loop will run again and again, as long as a variable (i) is less than 5:
- Example 

public class Main {
    public static void main(String[] args) {
        int i = 0;

        while (i < 5) {
            System.out.println(i);
            i++;
        }
    }
}

- Note: Do not forget to increase the variable used in the condition (i++), otherwise the loop will never end!
- Do you wonder why we used the letter i in the example above? It's a counter variable and a common choice in simple loops because it's short, traditional, and stands for 'index' or 'iterator'.

Countdown Example
- You can also use a while loop to count down. This example counts from 3 to 1, and then prints "Happy New Year!!" at the end:
- Example

public class Main {
    public static void main(String[] args) {
        int countdown = 3;

        while (countdown > 0) {
            System.out.println(countdown);
            countdown--;
        }

        System.out.println("Happy New Year!!");  
    }
}

While Loop With False Condition
- In the previous examples, the condition was true at the start, so the loop ran one or more times. But if the condition is false at the beginning, the code inside the loop will never run:
- Example

public class Main {
    public static void main(String[] args) {
        int i = 10;

        while (i < 5) {
            System.out.println("This will never be printed");
            i++;
        }
    }
}

- Note: A while loop may never run if the condition is false from the start. In the next chapter, you will learn about the do while loop, which always runs the code at least once before checking the condition.

Java Do/While Loop

The Do/While Loop
- The do/while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true. Then it will repeat the loop as long as the condition is true.
- Syntax

do {
    // code block to be executed
}
while (condition);

- Note: The semicolon ; after the while condition is required!
- Example: 

public class Main {
    public static void main(String[] args) {
        int i = 0;
        do {
            System.out.println(i);
            i++;
        }
        while (i < 5);  
    }
}

- Do not forget to increase the variable used in the condition (i++), otherwise the loop will never end!

Condition is False from the Start
- In the while loop chapter, we saw that if the condition is false at the beginning, the loop never runs at all.
- The do/while loop is different: it will always run the code block at least once, even if the condition is false from the start.
- In the example below, the variable i starts at 10, so i < 5 is false immediately. Still, the loop runs once before checking the condition:
- Example

int i = 10;

do {
    System.out.println("i is " + i);
    i++;
} while (i < 5);

- Summary: A do/while loop always runs at least once, even if the condition is false at the start. This is the key difference from a while loop, which would skip the code block completely in the same situation.
- This behavior makes do/while useful when you want something to happen at least once, such as showing a message or asking the user for input.

Java While Loop Examples

Real-Life Examples
- To demonstrate a practical example of the while loop, we have created a simple "countdown" program:
- Example

public class Main {
    public static void main(String[] args) {
        int countdown = 3;

        while (countdown > 0) {
            System.out.println(countdown);
            countdown--;
        }
        
        System.out.println("Happy New Year!!");
    }
}


- To demonstrate a practical example of the while loop combined with an if else statement, let's say we play a game of Yatzy:
- Example: Print "Yatzy!" If the dice number is 6:

public class Main {
    public static void main(String[] args) {
        int dice = 1;

        while (dice <= 6) {
            if (dice < 6) {
                System.out.println("No Yatzy.");
            } else {
                System.out.println("Yatzy!");
            }
            dice = dice + 1;
        }
    }
}

- If the loop passes the values ranging from 1 to 5, it prints "No Yatzy". Whenever it passes the value 6, it prints "Yatzy!".